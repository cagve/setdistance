use eframe::{run_native, App, CreationContext};
use egui::{Context, Vec2};
use egui_graphs::{Graph, GraphView, Node};
use petgraph::{stable_graph::StableGraph, Directed};

pub struct BasicApp {
    g: Graph<(), (), Directed>,
}

impl BasicApp {
    pub fn new(metric_space:Vec<Vec<String>>,_: &CreationContext<'_>) -> Self {
        let g = generate_graph(metric_space);
        return Self { g: Graph::from(&g)};
    }
}

pub fn generate_graph(metric_space: Vec<Vec<String>>) -> StableGraph<(), (), Directed> {

    let mut g: StableGraph<(), ()> = StableGraph::new();
    
    metric_space.iter().for_each(|set|{
        set.iter()
            .for_each(|point|{
                let pos = Vec2{x:10.0, y:10.0};
                let n = Node::new(pos, ());
                g.add_node(n);
            })
    });
    return g;
}

impl App for BasicApp {
    fn update(&mut self, ctx: &Context, _: &mut eframe::Frame) {
        egui::CentralPanel::default().show(ctx, |ui| {
            ui.add(&mut GraphView::new(&mut self.g));
        });
    }
}
